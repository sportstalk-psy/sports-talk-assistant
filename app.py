
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from openai import OpenAI
import os
from dotenv import load_dotenv
import random
import json
import re
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from collections import defaultdict
import datetime

load_dotenv()

message_history = defaultdict(list)
recommendation_state = defaultdict(lambda: {
    "since_last": 100,
    "last_asked_general": False,
    "waiting_for_age": False,
    "problem_collected": False,
    "age_collected": False,
    "user_age_group": None,
    "last_problem_message": None
})

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)

with open("templates.json", "r", encoding="utf-8") as f:
    templates = json.load(f)

ready_embeddings = []
for person in psychologists:
    try:
        embedding = np.array(
            client.embeddings.create(
                model="text-embedding-3-small",
                input=person["description"]
            ).data[0].embedding
        )
        ready_embeddings.append({"person": person, "embedding": embedding})
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è {person['name']}: {str(e)}")

def find_relevant_psychologists(query, top_n=2, threshold=0.35, user_age_group=None):
    query_embedding = np.array(
        client.embeddings.create(
            model="text-embedding-3-small",
            input=query
        ).data[0].embedding
    ).reshape(1, -1)

    results = []
    for item in ready_embeddings:
        person = item["person"]
        if "age_group" not in person:
            print(f"‚ö†Ô∏è –£ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ {person['name']} –Ω–µ —É–∫–∞–∑–∞–Ω age_group.")
        if user_age_group == "children" and person.get("age_group") not in ["children", "all"]:
            print(f"üîΩ –ü—Ä–æ–ø—É—â–µ–Ω: {person['name']} ‚Äî –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞")
            continue
        if user_age_group == "adults" and person.get("age_group") not in ["adults", "all"]:
            print(f"üîΩ –ü—Ä–æ–ø—É—â–µ–Ω: {person['name']} ‚Äî –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞")
            continue
        similarity = cosine_similarity(query_embedding, item["embedding"].reshape(1, -1))[0][0]
        results.append((person, similarity))

    relevant = sorted([r for r in results if r[1] >= threshold], key=lambda x: -x[1])
    return [r[0] for r in relevant[:top_n]]

#general_phrases = [
    "–ø–æ–¥–±–µ—Ä–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø–æ—Å–æ–≤–µ—Ç—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥",
    "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
    "–º–Ω–µ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∏—â—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥ –Ω—É–∂–µ–Ω", "–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"
]

valid_problem_keywords = [
    "—Å—Ç—Ä–∞—Ö", "–≤–æ–ª–Ω–µ–Ω–∏–µ", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–≤—ã–≥–æ—Ä–∞–Ω–∏–µ", "—Ç—Ä–∞–≤–º–∞", "–æ—à–∏–±–∫–∞",
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–æ–≤–∞–ª", "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–∫—Ä–∏–∑–∏—Å",
    "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Å—Ç—Ä–µ—Å—Å", "—ç–º–æ—Ü–∏–∏", "–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è"
]

manager_phrases = [
    "—Å–≤—è–∂–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "–≥–¥–µ –º–µ–Ω–µ–¥–∂–µ—Ä",
    "–Ω–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–º–æ–≥–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "—Å–∞–ø–ø–æ—Ä—Ç", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", "–Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", "–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞", "–æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_message_raw = request.json.get("message", "")
        user_message = user_message_raw.lower()

        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_ip}: {user_message_raw}")

        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        user_ip = request.remote_addr
        message_history[user_ip].append(user_message_raw)
        if len(message_history[user_ip]) > 10:
            message_history[user_ip].pop(0)

        state = recommendation_state[user_ip]
        found_age = False

        # –í–æ–∑—Ä–∞—Å—Ç
        age_match = re.search(r"\b(—Å—ã–Ω—É|–¥–æ—á–∫–µ|–º–∞–ª—å—á–∏–∫—É|–¥–µ–≤–æ—á–∫–µ|—Å–ø–æ—Ä—Ç—Å–º–µ–Ω—É|—Ä–µ–±—ë–Ω–∫—É|—Ä–µ–±–µ–Ω–∫—É|–ø–æ–¥—Ä–æ—Å—Ç–∫—É)?\s*(\d{1,2})", user_message)
        if age_match:
            found_age = True
            try:
                age = int(age_match.group(2))
                if 5 <= age <= 18:
                    state["age_collected"] = True
                    state["user_age_group"] = "children"
                elif 19 <= age <= 80:
                    state["age_collected"] = True
                    state["user_age_group"] = "adults"
            except ValueError:
                pass
        else:
            try:
                age = int(user_message.strip())
                if 5 <= age <= 18:
                    state["age_collected"] = True
                    state["user_age_group"] = "children"
                elif 19 <= age <= 80:
                    state["age_collected"] = True
                    state["user_age_group"] = "adults"
            except ValueError:
                pass

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–æ–∑—Ä–∞—Å—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if found_age and state.get("last_problem_message") and len(user_message.split()) <= 3:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–±–ª–µ–º–æ–π.")
            user_message_raw = state["last_problem_message"]
            user_message = user_message_raw.lower()

        #is_general = any(phrase in user_message for phrase in general_phrases)
        wants_manager = any(phrase in user_message for phrase in manager_phrases)
        
# –ø–æ–∫–∞ –æ—Ç—Ä—É–±–∞–µ–º —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø—Ä–æ—Å–∞ has_detail = any(word in user_message for word in valid_problem_keywords)

        # --- –ù–æ–≤—ã–π system_prompt ---
        system_prompt = (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ Sports Talk, —Ç–µ–±—è –∑–æ–≤—É—Ç –ú–∞—Ä–∫. "
            "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º, —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º –ø–æ —Ç–µ–º–∞–º –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. "
            "–°—Ñ–µ—Ä–∞ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã: –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, —Ç—Ä–∞–≤–º—ã, —Å—Ç—Ä–∞—Ö –æ—à–∏–±–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –¥–∞–≤–ª–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å –∏ –¥—Ä—É–≥–∏–µ –ø—Å–∏—Ö–æ—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Å–ø–æ—Ä—Ç–µ. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ ‚Äî –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –ø—Ä–æ–±–ª–µ–º—É, —Ç—Ä–µ–±—É—é—â—É—é –ª–∏—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã, —Å–∫–∞–∂–∏: '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤'. "
            "–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Ç–µ—Ö–Ω–∏–∫–∞–º–∏: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–≥—Ä—ã, –ø—Ä–∏—ë–º—ã —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
            "–¢–µ–±–µ –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –æ–∫–æ–ª–æ—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã ‚Äî —Ñ–∏–ª—å–º—ã, –∫–Ω–∏–≥–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã, –º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –∏ —Ç.–¥., –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ —Å–ø–æ—Ä—Ç–∞ ‚Äî –º—è–≥–∫–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π. "
            "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ. –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É–∫–∞–∑–∞–Ω. "
            "–í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Sports Talk."
)

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = message_history[user_ip][-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–ø–ª–∏–∫ –º–∞–∫—Å–∏–º—É–º

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ò–ò
        messages = [{"role": "system", "content": system_prompt}]
        for user_msg in history:
            messages.append({"role": "user", "content": user_msg})

        completion = client.chat.completions.create(model="gpt-4-turbo", messages=messages)
        base_reply = completion.choices[0].message.content

        # --- –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ---
        is_direct_request = any(kw in user_message for kw in ["–ø–æ–¥–±–µ—Ä–∏", "–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∏—â—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø–æ—Å–æ–≤–µ—Ç—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞"])

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–Ω—è–ª –ª–∏ –ò–ò –ø—Ä–æ–±–ª–µ–º—É —Å–∞–º ---
        if any(keyword in base_reply.lower() for keyword in ["—É—Ç–æ—á–Ω–∏—Ç–µ", "–ø–æ—è—Å–Ω–∏—Ç–µ", "—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", "—á—Ç–æ –∏–º–µ–Ω–Ω–æ", "—Å —á–µ–º —Å–≤—è–∑–∞–Ω–æ"]):
            state["problem_collected"] = False
        else:
            state["problem_collected"] = True
            state["last_problem_message"] = user_message_raw

        if wants_manager:
            base_reply += "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ ‚Äî "
            base_reply += "<br><a href='https://wa.me/+79112598408' target='_blank'>üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</a>"
            return jsonify({"response": base_reply})

        # --- –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–æ –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –ø—Ä–æ—Å–∏–º –∏—Ö –≤–º–µ—Å—Ç–µ ---
        if is_direct_request and not (state["problem_collected"] and state["age_collected"]):
            return jsonify({"response": "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –∫–∞–∫–æ–π —Ç–µ–º–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è."})

        # --- –ï—Å–ª–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç, –∏ –ø—Ä–æ–±–ª–µ–º–∞ –µ—Å—Ç—å ‚Äî –ø–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–ø–æ –ø—Ä—è–º–æ–º—É –∑–∞–ø—Ä–æ—Å—É) ---
        if is_direct_request and state["problem_collected"] and state["age_collected"]:
            matches = find_relevant_psychologists(user_message, user_age_group=state["user_age_group"])
            if matches:
                rec_text = random.choice(templates["start_recommendation"])
                base_reply = rec_text
                for match in matches:
                    base_reply += f"<br><br><strong>üë§ {match['name']}</strong><br>{match['description']}<br><a href='{match['link']}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
            else:
                base_reply = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —è –µ—â–µ –Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –∑–Ω–∞—é –±–∞–∑—É, —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º? –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            return jsonify({"response": base_reply})

        # --- –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–µ—Å—Å) ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç + 1 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ---
        if state["problem_collected"] and state["age_collected"]:
            matches = find_relevant_psychologists(user_message, user_age_group=state["user_age_group"])
            if matches:
                base_reply += "<br><br>–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:"
                match = matches[0]
                base_reply += f"<br><br><strong>üë§ {match['name']}</strong><br>{match['description']}<br><a href='{match['link']}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"

        return jsonify({"response": base_reply})

    except Exception as e:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"üö® [{now}] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

@app.route("/")
def home():
    return send_from_directory(".", "index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)
