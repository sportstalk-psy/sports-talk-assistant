from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from openai import OpenAI
import os
from dotenv import load_dotenv
load_dotenv()
import random
import json
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from collections import defaultdict

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø–æ IP)
message_history = defaultdict(list)
recommendation_state = defaultdict(lambda: {"since_last": 100, "last_asked_general": False, "waiting_for_age": False, "problem_collected": False})

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)
print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(psychologists)} –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤.")

with open("templates.json", "r", encoding="utf-8") as f:
    templates = json.load(f)

# –°—á–∏—Ç–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
ready_embeddings = []
for person in psychologists:
    embedding = None
    try:
        embedding = np.array(
            client.embeddings.create(
                model="text-embedding-3-small",
                input=person["description"]
            ).data[0].embedding
        )
        ready_embeddings.append({"person": person, "embedding": embedding})
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è {person['name']} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è {person['name']}: {str(e)}")

def get_embedding(text):
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding

def find_relevant_psychologists(query, top_n=2, threshold=0.35):
    query_embedding = np.array(
        client.embeddings.create(
            model="text-embedding-3-small",
            input=query
        ).data[0].embedding
    ).reshape(1, -1)

    results = []
    for item in ready_embeddings:
        similarity = cosine_similarity(query_embedding, item["embedding"].reshape(1, -1))[0][0]
        print(f"üîó –°—Ö–æ–¥—Å—Ç–≤–æ —Å {item['person']['name']}: {similarity:.3f}")
        results.append((item["person"], similarity))

    relevant = sorted([r for r in results if r[1] >= threshold], key=lambda x: -x[1])
    return [r[0] for r in relevant[:top_n]]

# –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
general_phrases = [
    "–ø–æ–¥–±–µ—Ä–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø–æ—Å–æ–≤–µ—Ç—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥", 
    "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
    "–º–Ω–µ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∏—â—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥ –Ω—É–∂–µ–Ω", "–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"
]

# –§—Ä–∞–∑—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø—Ä–æ—Å–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
manager_phrases = [
    "—Å–≤—è–∂–∏—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "—Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "–≥–¥–µ –º–µ–Ω–µ–¥–∂–µ—Ä", 
    "–Ω–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–º–æ–≥–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "—Å–∞–ø–ø–æ—Ä—Ç", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", "–Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", "–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞", "–æ—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
    "–ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_message_raw = request.json.get("message", "")
        user_message = user_message_raw.lower()

        # –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        confusion_phrases = ["–Ω–µ –ø–æ–Ω—è–ª–∞", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—á—Ç–æ?", "–Ω–µ —Å–æ–≤—Å–µ–º —è—Å–Ω–æ", "–Ω–µ—è—Å–Ω–æ", "–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ", "–Ω–µ —è—Å–Ω–æ"]


        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        user_ip = request.remote_addr
        message_history[user_ip].append(user_message_raw)
        if len(message_history[user_ip]) > 10:
            message_history[user_ip].pop(0)

        state = recommendation_state[user_ip]

        if any(phrase in user_message for phrase in confusion_phrases):
            if state.get("last_problem_message"):
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏.")
                user_message_raw = state["last_problem_message"]
                user_message = user_message_raw.lower()
            else:
                print("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —á–∏—Å–ª—É
        age_keywords = ["–ª–µ—Ç", "–≥–æ–¥", "–≥–æ–¥–∞", "–ø–æ–¥—Ä–æ—Å—Ç–æ–∫", "—Ä–µ–±—ë–Ω–æ–∫", "—Ä–µ–±–µ–Ω–æ–∫"]
        if any(word in user_message for word in age_keywords):
            state["age_collected"] = True
        else:
            try:
                age = int(user_message.strip())
                if 5 <= age <= 80:
                    state["age_collected"] = True
            except ValueError:
                pass

        is_general = any(phrase in user_message for phrase in general_phrases)
        wants_manager = any(phrase in user_message for phrase in manager_phrases)
        has_detail = not any(phrase in user_message for phrase in general_phrases)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
        system_prompt = (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Sports Talk. "
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–º–µ–Ω–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤. "
            "–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π Sports Talk –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. "
            "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞–º, –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
            "–†–∞–±–æ—Ç–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∞–º–∏: –º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ, —Ç—Ä–∞–≤–º—ã, —Å—Ç—Ä–∞—Ö –æ—à–∏–±–∫–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. "
            "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ ‚Äî –º—è–≥–∫–æ —Å–æ–æ–±—â–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. "
            "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ '–ø—Å–∏—Ö–æ–ª–æ–≥', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ø–æ–º–æ—â—å', '–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π' –∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã. "
            "–°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω—è–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. "
            "–û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç: –µ—Å–ª–∏ —Ä–µ–±—ë–Ω–æ–∫ –∏–ª–∏ –ø–æ–¥—Ä–æ—Å—Ç–æ–∫ ‚Äî –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö. "
            "–í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω. "
            "–ü–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—É '–ü–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:' "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –û–±—â–∞–π—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
        )

        messages = [{"role": "system", "content": system_prompt}]
        messages.append({"role": "user", "content": user_message_raw})

        completion = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        base_reply = completion.choices[0].message.content

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–æ—Å–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ---
        if wants_manager:
            base_reply += (
                "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, "
                "–Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–µ—à–∏—Ç—å —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã:"
                "<br><br><a href='https://wa.me/+79112598408' target='_blank' style='color:#ebf5ff;'>üì≤ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</a>"
            )
            return jsonify({"response": base_reply})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è
        if is_general and not has_detail:
            state["last_asked_general"] = True
            state["since_last"] += 1
            if any(phrase in base_reply.lower() for phrase in ["—É—Ç–æ—á–Ω–∏—Ç–µ", "–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å", "—á—Ç–æ –∏–º–µ–Ω–Ω–æ", "–∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "—Å —á–µ–º –∏–º–µ–Ω–Ω–æ"]):
                return jsonify({"response": base_reply})
            else:
                clarify_text = random.choice(templates["clarify_problem"])
                return jsonify({"response": base_reply + "\n\n" + clarify_text})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
        if state["last_asked_general"] and has_detail:
            state["last_asked_general"] = False
            state["since_last"] = 0
            state["problem_collected"] = True
            return jsonify({"response": base_reply})

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        matches = find_relevant_psychologists(user_message)

        if matches:
            start_rec_text = random.choice(templates["start_recommendation"])
            base_reply += "\n\n" + start_rec_text
            for match in matches:
                base_reply += (
                    f"<br><br><strong>üë§ {match['name']}</strong><br>"
                    f"{match['description']}<br>"
                    f"<a href='{match['link']}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞</a>"
                )
        else:
            print("üëÄ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç.")

        # ‚úÖ –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç!
        return jsonify({"response": base_reply})

    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", str(e))
        return jsonify({"response": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

@app.route("/")
def home():
    return send_from_directory(".", "index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
