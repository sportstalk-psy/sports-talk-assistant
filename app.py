
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from openai import OpenAI
import os
from dotenv import load_dotenv
load_dotenv()
import json
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)

def get_embedding(text):
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding

def find_relevant_psychologists(query, top_n=2, threshold=0.35):
    query_embedding = np.array(get_embedding(query)).reshape(1, -1)
    results = []
    for person in psychologists:
        desc_embedding = np.array(get_embedding(person["description"])).reshape(1, -1)
        similarity = cosine_similarity(query_embedding, desc_embedding)[0][0]
        results.append((person, similarity))
    relevant = sorted([r for r in results if r[1] >= threshold], key=lambda x: -x[1])
    return [r[0] for r in relevant[:top_n]]

general_phrases = [
    "–ø–æ–¥–±–µ—Ä–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø–æ—Å–æ–≤–µ—Ç—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥", 
    "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
    "–º–Ω–µ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∏—â—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥ –Ω—É–∂–µ–Ω", "–ø—Å–∏—Ö–æ–ª–æ–≥–∞ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞"
]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_message_raw = request.json.get("message", "")
        user_message = user_message_raw.lower()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        is_general = any(phrase in user_message for phrase in general_phrases)

        system_prompt = (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Sports Talk. "
            "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, "
            "–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–º—ë–Ω, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. "
            "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ '–ø–æ—Å–æ–≤–µ—Ç—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∞'), —É—Ç–æ—á–Ω–∏, —Å —á–µ–º –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ —Å—Ä–∞–∑—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ –±—ã–ª–æ —Ä–∞–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è. "
            "–ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ï—Å–ª–∏ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: <strong> –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, <ul> –∏ <li> –¥–ª—è —Å–ø–∏—Å–∫–æ–≤, <br> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫."
        )

        messages = [{"role": "system", "content": system_prompt}]
        messages.append({"role": "user", "content": user_message_raw})

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        base_reply = completion.choices[0].message.content

        if is_general:
            return jsonify({"response": base_reply})

        matches = find_relevant_psychologists(user_message)
        if matches:
            base_reply += "\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:"
            for match in matches:
                base_reply += (
                    f"\nüë§ <strong>{match['name']}</strong><br>"
                    f"{match['description']}<br>"
                    f"<a href='{match['link']}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞</a>"
                )

        return jsonify({"response": base_reply})

    except Exception as e:
        return jsonify({"response": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

@app.route("/")
def home():
    return send_from_directory(".", "index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
