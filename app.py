
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os
import json
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)

# –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∏–∑ OpenAI
def get_embedding(text):
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-2 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∞
def find_relevant_psychologists(query, top_n=2, threshold=0.80):
    query_embedding = np.array(get_embedding(query)).reshape(1, -1)
    results = []

    for person in psychologists:
        desc_embedding = np.array(get_embedding(person["description"])).reshape(1, -1)
        similarity = cosine_similarity(query_embedding, desc_embedding)[0][0]
        results.append((person, similarity))

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    relevant = sorted([r for r in results if r[1] >= threshold], key=lambda x: -x[1])
    return [r[0] for r in relevant[:top_n]]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_message = request.json.get("message", "")
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
                        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤, "
                        "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ —Å–º–µ–∂–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏. "
                        "–ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —ç—Ç–∏–º ‚Äî –º—è–≥–∫–æ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–± —ç—Ç–æ–º. "
                        "–ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –∫—Ä–∞—Ç–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É."
                    )
                },
                {"role": "user", "content": user_message}
            ]
        )

        base_reply = completion.choices[0].message.content

        # –ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
        matches = find_relevant_psychologists(user_message)
        if matches:
            base_reply += "\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:"
            for match in matches:
                base_reply += f"\n\nüë§ {match['name']} ‚Äî {match['description']}\nüîó {match['link']}"

        return jsonify({"response": base_reply})

    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", str(e))
        return jsonify({"response": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
