import os
import re
import json
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from sklearn.metrics.pairwise import cosine_similarity
from dotenv import load_dotenv

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
MIN_CLIENT_AGE = 5
MAX_CLIENT_AGE = 80

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI-–∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)


def get_embedding(text: str) -> np.ndarray:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI API.
    """
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return np.array(response.data[0].embedding)


def classify_age_group(message: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–±—ë–Ω–∫–æ–º (<18) –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã–º (>=18).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'child' –∏–ª–∏ 'adult'.
    """
    prompt_system = (
        "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –∫–ª–∏–µ–Ω—Ç–∞. "
        f"–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–ª–∞–¥—à–µ 18 –ª–µ—Ç, –æ—Ç–≤–µ—Ç—å 'child', –∏–Ω–∞—á–µ 'adult'. "
        f"–†–∞–±–æ—Ç–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–∞–º–∏ –æ—Ç {MIN_CLIENT_AGE} –¥–æ {MAX_CLIENT_AGE}."
    )
    resp = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": prompt_system},
            {"role": "user", "content": message}
        ]
    )
    grp = resp.choices[0].message.content.strip().lower()
    return 'child' if 'child' in grp else 'adult'


def find_relevant_psychologists(query: str, age_group: str, top_n: int = 2, threshold: float = 0.3) -> list[dict]:
    """
    –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    - –î–ª—è –¥–µ—Ç–µ–π (child): –æ—Ç–±–∏—Ä–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, —á—å–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å [{MIN_CLIENT_AGE}, 17].
    - –î–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (adult): –æ—Ç–±–∏—Ä–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, —á—å–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å [18, {MAX_CLIENT_AGE}].
    """
    candidates = []
    for p in psychologists:
        p_min = p.get('min_age', MIN_CLIENT_AGE)
        p_max = p.get('max_age', MAX_CLIENT_AGE)
        if age_group == 'child':
            if p_min < 18 and p_max >= MIN_CLIENT_AGE:
                candidates.append(p)
        else:
            if p_min <= MAX_CLIENT_AGE and p_max >= 18:
                candidates.append(p)

    # –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
    query_emb = get_embedding(query).reshape(1, -1)
    scored = []
    for person in candidates:
        try:
            desc_emb = get_embedding(person.get('description', '')).reshape(1, -1)
            sim = cosine_similarity(query_emb, desc_emb)[0][0]
            if sim >= threshold:
                scored.append((person, sim))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è {person.get('name')}: {e}")

    scored.sort(key=lambda x: x[1], reverse=True)
    return [p for p, _ in scored[:top_n]]


@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.json or {}
        user_message = data.get("message", "").strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã
        system_prompt = (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Sports Talk. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º. "
            "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ —Å–ø–æ—Ä—Ç, –æ—Ç–≤–µ—Ç—å: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä—Ç–æ–º.' "
            "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã psychologists_base.json."
        )
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_message}
        ]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        completion = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages
        )
        base_reply = completion.choices[0].message.content.strip()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        if re.search(r"–ø—Å–∏—Ö–æ–ª–æ–≥", user_message, flags=re.IGNORECASE):
            age_group = classify_age_group(user_message)
            matches = find_relevant_psychologists(user_message, age_group)
            if matches:
                base_reply += "\n\n–ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:"
                for m in matches:
                    base_reply += (
                        f"<br><br><strong>üë§ {m.get('name')}</strong><br>"
                        f"{m.get('description', '')}<br>"
                        f"<a href='{m.get('link')}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
                    )

        return jsonify({"response": base_reply})

    except Exception as e:
        print("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", str(e))
        return jsonify({"response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 80)))