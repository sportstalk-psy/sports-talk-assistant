from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os
import json
from dotenv import load_dotenv
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

load_dotenv()

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

with open("psychologists_base.json", "r", encoding="utf-8") as f:
    psychologists = json.load(f)

def get_embedding(text):
    return np.array(
        client.embeddings.create(
            model="text-embedding-3-small",
            input=text
        ).data[0].embedding
    )

def find_relevant_psychologists(query, top_n=2, threshold=0.3):
    query_embedding = get_embedding(query).reshape(1, -1)
    results = []
    for person in psychologists:
        try:
            desc_embedding = get_embedding(person["description"]).reshape(1, -1)
            similarity = cosine_similarity(query_embedding, desc_embedding)[0][0]
            if similarity >= threshold:
                results.append((person, similarity))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —É {person['name']}: {e}")
    relevant = sorted(results, key=lambda x: -x[1])
    return [r[0] for r in relevant[:top_n]]

@app.route("/chat", methods=["POST"])
def chat():
    try:
        user_message = request.json.get("message", "").strip()
        if not user_message:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        messages = [
            {"role": "system", "content": (
                "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ Sports Talk, —Ç–µ–±—è –∑–æ–≤—É—Ç –ú–∞—Ä–∫. "
                "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –æ–±–æ–¥—Ä—è—é—â–∏–º —Ç–æ–Ω–æ–º, —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –±—É–¥—É—â–µ–µ. "
                "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ‚Äî –≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞, –Ω–µ –ø–∏—à–∏ –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –≤ –æ–±—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ JSON."
            )},
            {"role": "user", "content": user_message}
        ]

        completion = client.chat.completions.create(model="gpt-4-turbo", messages=messages)
        base_reply = completion.choices[0].message.content.strip()

        matches = find_relevant_psychologists(user_message)
        if matches:
            base_reply += "\n\n–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:"
            for match in matches:
                base_reply += (
                    f"<br><br><strong>üë§ {match['name']}</strong><br>"
                    f"{match['description']}<br>"
                    f"<a href='{match['link']}' target='_blank'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</a>"
                )

        return jsonify({"response": base_reply})

    except Exception as e:
        print("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", str(e))
        return jsonify({"response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=80)